"use client";

import React, { useState } from "react";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { ScrollArea } from "@/components/ui/scroll-area";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Alert, AlertDescription } from "@/components/ui/alert";
import {
  CheckCircle,
  AlertTriangle,
  AlertCircle,
  Copy,
  Download,
  Share,
  Bug,
  Lightbulb,
  Shield,
  FileText,
  ExternalLink,
  Target,
  Clock,
  Zap,
} from "lucide-react";
import type { LogAnalysisResponse } from "@/types/log-analysis";
import { toast } from "sonner";

interface LogAnalysisResultProps {
  result: LogAnalysisResponse;
}

export function LogAnalysisResult({ result }: LogAnalysisResultProps) {
  const [copiedSection, setCopiedSection] = useState<string | null>(null);

  const getSeverityIcon = (severity: string) => {
    switch (severity.toLowerCase()) {
      case "critical":
      case "high":
        return <AlertCircle className="h-4 w-4 text-red-500" />;
      case "medium":
        return <AlertTriangle className="h-4 w-4 text-yellow-500" />;
      case "low":
        return <CheckCircle className="h-4 w-4 text-green-500" />;
      default:
        return <Bug className="h-4 w-4 text-gray-500" />;
    }
  };

  const getSeverityColor = (severity: string) => {
    switch (severity.toLowerCase()) {
      case "critical":
      case "high":
        return "bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-300";
      case "medium":
        return "bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-300";
      case "low":
        return "bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-300";
      default:
        return "bg-gray-100 text-gray-800 dark:bg-gray-900 dark:text-gray-300";
    }
  };

  const getConfidenceColor = (score: number) => {
    if (score >= 0.8) return "text-green-600 dark:text-green-400";
    if (score >= 0.6) return "text-yellow-600 dark:text-yellow-400";
    return "text-red-600 dark:text-red-400";
  };

  const copyToClipboard = async (text: string, section: string) => {
    try {
      await navigator.clipboard.writeText(text);
      setCopiedSection(section);
      toast.success(`${section} copied to clipboard`);
      setTimeout(() => setCopiedSection(null), 2000);
    } catch {
      toast.error("Failed to copy to clipboard");
    }
  };

  const downloadReport = () => {
    const report = `# Log Analysis Report

## Error Summary
- **Category**: ${result.error_details.category}
- **Severity**: ${result.analysis_summary.severity}
- **Confidence**: ${(result.analysis_summary.confidence_score * 100).toFixed(1)}%

## Root Cause
${result.analysis_summary.root_cause}

## Affected Components
${[...result.analysis_summary.affected_components.files, ...result.analysis_summary.affected_components.classes, ...result.analysis_summary.affected_components.objects].map((comp) => `- ${comp}`).join("\n")}

## Solution Steps
${result.solution.immediate_fixes.map((step, index) => `${index + 1}. ${step}`).join("\n")}

## Code Changes
${result.solution.code_changes.map((change, index) => `${index + 1}. ${change}`).join("\n")}

## Configuration Changes
${result.solution.configuration_changes.map((change, index) => `${index + 1}. ${change}`).join("\n")}

## Prevention Measures
${result.solution.prevention_measures.map((tip) => `- ${tip}`).join("\n")}

## Additional Resources
${result.additional_resources.map((doc) => `- ${doc}`).join("\n")}

## Slack Message
${result.slack_formatted.summary}

---
Generated by ISC CodeConnect Log Analysis Agent
Processing Time: ${result.processing_metadata.processing_time}s
Tools Used: ${result.processing_metadata.tools_used.join(", ")}
`;

    const blob = new Blob([report], { type: "text/markdown" });
    const url = URL.createObjectURL(blob);
    const a = document.createElement("a");
    a.href = url;
    a.download = "log-analysis-report.md";
    a.click();
    URL.revokeObjectURL(url);
  };

  if (!result.success && result.error) {
    return (
      <div className="flex-1 flex flex-col min-h-0 bg-background">
        <div className="sticky top-0 z-10 bg-background border-b px-6 py-4">
          <div className="flex items-center justify-between">
            <div>
              <h1 className="text-2xl font-semibold text-red-600">
                Analysis Failed
              </h1>
              <p className="text-muted-foreground">
                An error occurred during log analysis
              </p>
            </div>
          </div>
        </div>

        <div className="flex-1 overflow-auto px-6 py-6">
          <Alert variant="destructive">
            <AlertCircle className="h-4 w-4" />
            <AlertDescription>
              {result.error?.message ||
                "Unknown error occurred during analysis"}
            </AlertDescription>
          </Alert>
        </div>
      </div>
    );
  }

  return (
    <div className="flex-1 flex flex-col min-h-0 bg-background">
      {/* Header - Sticky */}
      <div className="sticky top-0 z-10 bg-background border-b px-6 py-4">
        <div className="flex items-center justify-between">
          <div>
            <h1 className="text-2xl font-semibold flex items-center gap-2">
              <CheckCircle className="h-6 w-6 text-green-500" />
              Analysis Complete
            </h1>
            <p className="text-muted-foreground">
              AI-powered debugging insights and recommendations
            </p>
          </div>
          <div className="flex items-center gap-2">
            <Badge
              className={getConfidenceColor(
                result.analysis_summary.confidence_score
              )}
            >
              {(result.analysis_summary.confidence_score * 100).toFixed(1)}%
              Confidence
            </Badge>
            <Button variant="outline" size="sm" onClick={downloadReport}>
              <Download className="h-4 w-4 mr-2" />
              Download
            </Button>
          </div>
        </div>
      </div>

      {/* Main Content - Scrollable */}
      <div className="flex-1 overflow-auto">
        <div className="max-w-6xl mx-auto px-6 py-6">
          <Tabs defaultValue="overview" className="w-full">
            <TabsList className="w-full justify-start overflow-x-auto mb-6">
              <TabsTrigger value="overview" className="flex-shrink-0">
                Overview
              </TabsTrigger>
              <TabsTrigger value="solution" className="flex-shrink-0">
                Solutions
              </TabsTrigger>
              <TabsTrigger value="code" className="flex-shrink-0">
                Code
              </TabsTrigger>
              <TabsTrigger value="prevention" className="flex-shrink-0">
                Prevention
              </TabsTrigger>
              <TabsTrigger value="slack" className="flex-shrink-0">
                Slack
              </TabsTrigger>
            </TabsList>

            <TabsContent value="overview" className="space-y-6">
              {/* Quick Stats Grid */}
              <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
                <div className="bg-card rounded-lg border p-4">
                  <div className="flex items-center gap-2 mb-2">
                    <Bug className="h-4 w-4 text-muted-foreground" />
                    <span className="text-sm font-medium">Category</span>
                  </div>
                  <p className="font-medium">{result.error_details.category}</p>
                </div>

                <div className="bg-card rounded-lg border p-4">
                  <div className="flex items-center gap-2 mb-2">
                    {getSeverityIcon(result.analysis_summary.severity)}
                    <span className="text-sm font-medium">Severity</span>
                  </div>
                  <Badge
                    className={getSeverityColor(
                      result.analysis_summary.severity
                    )}
                  >
                    {result.analysis_summary.severity}
                  </Badge>
                </div>

                <div className="bg-card rounded-lg border p-4">
                  <div className="flex items-center gap-2 mb-2">
                    <Target className="h-4 w-4 text-muted-foreground" />
                    <span className="text-sm font-medium">Components</span>
                  </div>
                  <p className="text-sm">
                    {result.analysis_summary.affected_components.files.length +
                      result.analysis_summary.affected_components.classes
                        .length +
                      result.analysis_summary.affected_components.objects
                        .length}{" "}
                    affected
                  </p>
                </div>

                <div className="bg-card rounded-lg border p-4">
                  <div className="flex items-center gap-2 mb-2">
                    <Clock className="h-4 w-4 text-muted-foreground" />
                    <span className="text-sm font-medium">Processing</span>
                  </div>
                  <p className="text-sm">
                    {result.processing_metadata.processing_time}s
                  </p>
                </div>
              </div>

              {/* Error Message */}
              <div className="bg-card rounded-lg border">
                <div className="p-4 border-b">
                  <div className="flex items-center justify-between">
                    <h3 className="font-semibold flex items-center gap-2">
                      <AlertTriangle className="h-4 w-4" />
                      Error Message
                    </h3>
                    <Button
                      variant="ghost"
                      size="sm"
                      onClick={() =>
                        copyToClipboard(
                          result.error_details.message,
                          "Error Message"
                        )
                      }
                    >
                      {copiedSection === "Error Message" ? (
                        <CheckCircle className="h-4 w-4 text-green-500" />
                      ) : (
                        <Copy className="h-4 w-4" />
                      )}
                    </Button>
                  </div>
                </div>
                <div className="p-4">
                  <div className="bg-red-50 dark:bg-red-950/20 border border-red-200 dark:border-red-800 rounded-lg p-4">
                    <p className="text-sm font-mono text-red-800 dark:text-red-200 leading-relaxed">
                      {result.error_details.message}
                    </p>
                  </div>
                  {result.error_details.stack_trace &&
                    result.error_details.stack_trace.length > 0 && (
                      <div className="mt-4">
                        <h4 className="text-sm font-medium text-muted-foreground mb-2">
                          Stack Trace
                        </h4>
                        <ScrollArea className="h-[200px]">
                          <div className="bg-gray-50 dark:bg-gray-950/20 border rounded-lg p-3">
                            <div className="space-y-1">
                              {result.error_details.stack_trace.map(
                                (trace, index) => (
                                  <p
                                    key={index}
                                    className="text-xs font-mono text-gray-700 dark:text-gray-300"
                                  >
                                    {trace}
                                  </p>
                                )
                              )}
                            </div>
                          </div>
                        </ScrollArea>
                      </div>
                    )}
                </div>
              </div>

              {/* Root Cause */}
              <div className="bg-card rounded-lg border">
                <div className="p-4 border-b">
                  <div className="flex items-center justify-between">
                    <h3 className="font-semibold flex items-center gap-2">
                      <AlertCircle className="h-4 w-4" />
                      Root Cause Analysis
                    </h3>
                    <Button
                      variant="ghost"
                      size="sm"
                      onClick={() =>
                        copyToClipboard(
                          result.analysis_summary.root_cause,
                          "Root Cause"
                        )
                      }
                    >
                      {copiedSection === "Root Cause" ? (
                        <CheckCircle className="h-4 w-4 text-green-500" />
                      ) : (
                        <Copy className="h-4 w-4" />
                      )}
                    </Button>
                  </div>
                </div>
                <div className="p-4">
                  <p className="text-sm leading-relaxed">
                    {result.analysis_summary.root_cause}
                  </p>
                </div>
              </div>

              {/* Affected Components */}
              <div className="bg-card rounded-lg border">
                <div className="p-4 border-b">
                  <h3 className="font-semibold flex items-center gap-2">
                    <Target className="h-4 w-4" />
                    Affected Components
                  </h3>
                </div>
                <div className="p-4">
                  <div className="space-y-4">
                    {result.analysis_summary.affected_components.files.length >
                      0 && (
                      <div>
                        <h4 className="text-sm font-medium text-muted-foreground mb-2">
                          Files
                        </h4>
                        <div className="flex flex-wrap gap-2">
                          {result.analysis_summary.affected_components.files.map(
                            (file, index) => (
                              <Badge key={index} variant="outline">
                                {file}
                              </Badge>
                            )
                          )}
                        </div>
                      </div>
                    )}
                    {result.analysis_summary.affected_components.classes
                      .length > 0 && (
                      <div>
                        <h4 className="text-sm font-medium text-muted-foreground mb-2">
                          Classes
                        </h4>
                        <div className="flex flex-wrap gap-2">
                          {result.analysis_summary.affected_components.classes.map(
                            (cls, index) => (
                              <Badge key={index} variant="outline">
                                {cls}
                              </Badge>
                            )
                          )}
                        </div>
                      </div>
                    )}
                    {result.analysis_summary.affected_components.objects
                      .length > 0 && (
                      <div>
                        <h4 className="text-sm font-medium text-muted-foreground mb-2">
                          Objects
                        </h4>
                        <div className="flex flex-wrap gap-2">
                          {result.analysis_summary.affected_components.objects.map(
                            (obj, index) => (
                              <Badge key={index} variant="outline">
                                {obj}
                              </Badge>
                            )
                          )}
                        </div>
                      </div>
                    )}
                  </div>
                </div>
              </div>
            </TabsContent>

            <TabsContent value="solution" className="space-y-6">
              <div className="bg-card rounded-lg border">
                <div className="p-4 border-b">
                  <div className="flex items-center justify-between">
                    <h3 className="font-semibold flex items-center gap-2">
                      <Lightbulb className="h-4 w-4" />
                      Solution Steps
                    </h3>
                    <Button
                      variant="ghost"
                      size="sm"
                      onClick={() =>
                        copyToClipboard(
                          [
                            "Immediate Fixes:",
                            ...result.solution.immediate_fixes.map(
                              (step, index) => `${index + 1}. ${step}`
                            ),
                            "",
                            "Code Changes:",
                            ...result.solution.code_changes.map(
                              (step, index) => `${index + 1}. ${step}`
                            ),
                            "",
                            "Configuration Changes:",
                            ...result.solution.configuration_changes.map(
                              (step, index) => `${index + 1}. ${step}`
                            ),
                          ].join("\n"),
                          "Solution Steps"
                        )
                      }
                    >
                      {copiedSection === "Solution Steps" ? (
                        <CheckCircle className="h-4 w-4 text-green-500" />
                      ) : (
                        <Copy className="h-4 w-4" />
                      )}
                    </Button>
                  </div>
                </div>

                <div className="p-4">
                  <div className="space-y-6">
                    {result.solution.immediate_fixes.length > 0 && (
                      <div>
                        <h4 className="text-sm font-medium text-muted-foreground mb-3">
                          Immediate Fixes
                        </h4>
                        <div className="space-y-3">
                          {result.solution.immediate_fixes.map(
                            (step, index) => (
                              <div key={index} className="flex gap-3">
                                <span className="flex-shrink-0 w-6 h-6 bg-red-500 text-white rounded-full flex items-center justify-center text-sm font-medium">
                                  {index + 1}
                                </span>
                                <span className="text-sm leading-relaxed">
                                  {step}
                                </span>
                              </div>
                            )
                          )}
                        </div>
                      </div>
                    )}

                    {result.solution.code_changes.length > 0 && (
                      <div>
                        <h4 className="text-sm font-medium text-muted-foreground mb-3">
                          Code Changes
                        </h4>
                        <div className="space-y-3">
                          {result.solution.code_changes.map((step, index) => (
                            <div key={index} className="flex gap-3">
                              <span className="flex-shrink-0 w-6 h-6 bg-blue-500 text-white rounded-full flex items-center justify-center text-sm font-medium">
                                {index + 1}
                              </span>
                              <span className="text-sm leading-relaxed">
                                {step}
                              </span>
                            </div>
                          ))}
                        </div>
                      </div>
                    )}

                    {result.solution.configuration_changes.length > 0 && (
                      <div>
                        <h4 className="text-sm font-medium text-muted-foreground mb-3">
                          Configuration Changes
                        </h4>
                        <div className="space-y-3">
                          {result.solution.configuration_changes.map(
                            (step, index) => (
                              <div key={index} className="flex gap-3">
                                <span className="flex-shrink-0 w-6 h-6 bg-green-500 text-white rounded-full flex items-center justify-center text-sm font-medium">
                                  {index + 1}
                                </span>
                                <span className="text-sm leading-relaxed">
                                  {step}
                                </span>
                              </div>
                            )
                          )}
                        </div>
                      </div>
                    )}
                  </div>
                </div>
              </div>
            </TabsContent>

            <TabsContent value="code" className="space-y-6">
              {result.code_examples && result.code_examples.length > 0 ? (
                <div className="space-y-6">
                  <h3 className="font-semibold flex items-center gap-2">
                    <FileText className="h-4 w-4" />
                    Related Code Examples
                  </h3>
                  {result.code_examples.map((example, index) => (
                    <div key={index} className="bg-card rounded-lg border">
                      <div className="p-4 border-b">
                        <div className="flex items-center justify-between">
                          <div>
                            <h4 className="font-medium">{example.source}</h4>
                            {example.metadata?.file_path && (
                              <p className="text-sm text-muted-foreground">
                                {example.metadata.file_path}
                              </p>
                            )}
                            {example.metadata?.description && (
                              <p className="text-sm text-muted-foreground mt-1">
                                {example.metadata.description}
                              </p>
                            )}
                          </div>
                          <Button
                            variant="ghost"
                            size="sm"
                            onClick={() =>
                              copyToClipboard(
                                example.example,
                                `Code Example ${index + 1}`
                              )
                            }
                          >
                            {copiedSection === `Code Example ${index + 1}` ? (
                              <CheckCircle className="h-4 w-4 text-green-500" />
                            ) : (
                              <Copy className="h-4 w-4" />
                            )}
                          </Button>
                        </div>
                      </div>
                      <div className="p-4">
                        <ScrollArea className="h-[400px]">
                          <pre className="text-sm bg-gray-50 dark:bg-gray-900 p-4 rounded overflow-x-auto">
                            <code>{example.example}</code>
                          </pre>
                        </ScrollArea>
                        {example.metadata &&
                          Object.keys(example.metadata).length > 0 && (
                            <div className="mt-4 pt-4 border-t">
                              <h5 className="text-sm font-medium mb-2">
                                Metadata
                              </h5>
                              <div className="text-xs text-muted-foreground space-y-1">
                                {Object.entries(example.metadata).map(
                                  ([key, value]) => (
                                    <div key={key} className="flex gap-2">
                                      <span className="font-medium">
                                        {key}:
                                      </span>
                                      <span>{String(value)}</span>
                                    </div>
                                  )
                                )}
                              </div>
                            </div>
                          )}
                      </div>
                    </div>
                  ))}
                </div>
              ) : (
                <div className="text-center py-12 text-muted-foreground">
                  <FileText className="h-12 w-12 mx-auto mb-4 opacity-50" />
                  <p>No code examples available for this analysis</p>
                </div>
              )}
            </TabsContent>

            <TabsContent value="prevention" className="space-y-6">
              <div className="bg-card rounded-lg border">
                <div className="p-4 border-b">
                  <div className="flex items-center justify-between">
                    <h3 className="font-semibold flex items-center gap-2">
                      <Shield className="h-4 w-4" />
                      Prevention Tips
                    </h3>
                    <Button
                      variant="ghost"
                      size="sm"
                      onClick={() =>
                        copyToClipboard(
                          result.solution.prevention_measures
                            .map((tip) => `• ${tip}`)
                            .join("\n"),
                          "Prevention Tips"
                        )
                      }
                    >
                      {copiedSection === "Prevention Tips" ? (
                        <CheckCircle className="h-4 w-4 text-green-500" />
                      ) : (
                        <Copy className="h-4 w-4" />
                      )}
                    </Button>
                  </div>
                </div>
                <div className="p-4">
                  <div className="space-y-3">
                    {result.solution.prevention_measures.map((tip, index) => (
                      <div key={index} className="flex gap-3">
                        <span className="flex-shrink-0 w-6 h-6 bg-blue-100 dark:bg-blue-900 text-blue-800 dark:text-blue-200 rounded-full flex items-center justify-center text-sm font-medium">
                          {index + 1}
                        </span>
                        <span className="text-sm leading-relaxed">{tip}</span>
                      </div>
                    ))}
                  </div>
                </div>
              </div>

              {result.additional_resources &&
                result.additional_resources.length > 0 && (
                  <div className="bg-card rounded-lg border">
                    <div className="p-4 border-b">
                      <h3 className="font-semibold flex items-center gap-2">
                        <ExternalLink className="h-4 w-4" />
                        Additional Resources
                      </h3>
                    </div>
                    <div className="p-4">
                      <div className="space-y-2">
                        {result.additional_resources.map((resource, index) => (
                          <div key={index} className="flex items-center gap-2">
                            <ExternalLink className="h-3 w-3 text-muted-foreground" />
                            <a
                              href={resource}
                              target="_blank"
                              rel="noopener noreferrer"
                              className="text-sm text-blue-600 dark:text-blue-400 hover:underline"
                            >
                              {resource}
                            </a>
                          </div>
                        ))}
                      </div>
                    </div>
                  </div>
                )}
            </TabsContent>

            <TabsContent value="slack" className="space-y-6">
              <div className="bg-card rounded-lg border">
                <div className="p-4 border-b">
                  <div className="flex items-center justify-between">
                    <h3 className="font-semibold flex items-center gap-2">
                      <Share className="h-4 w-4" />
                      Slack Message Format
                    </h3>
                    <Button
                      variant="ghost"
                      size="sm"
                      onClick={() =>
                        copyToClipboard(
                          result.slack_formatted.summary,
                          "Slack Message"
                        )
                      }
                    >
                      {copiedSection === "Slack Message" ? (
                        <CheckCircle className="h-4 w-4 text-green-500" />
                      ) : (
                        <Copy className="h-4 w-4" />
                      )}
                    </Button>
                  </div>
                </div>
                <div className="p-4">
                  <ScrollArea className="h-[400px]">
                    <div className="space-y-4">
                      <div>
                        <h4 className="text-sm font-medium mb-2">Summary</h4>
                        <pre className="text-sm font-mono whitespace-pre-wrap leading-relaxed bg-gray-50 dark:bg-gray-900 p-3 rounded border">
                          {result.slack_formatted.summary}
                        </pre>
                      </div>
                      <div>
                        <h4 className="text-sm font-medium mb-2">
                          Immediate Fixes
                        </h4>
                        <pre className="text-sm font-mono whitespace-pre-wrap leading-relaxed bg-gray-50 dark:bg-gray-900 p-3 rounded border">
                          {result.slack_formatted.immediate_fixes}
                        </pre>
                      </div>
                      <div>
                        <h4 className="text-sm font-medium mb-2">
                          Code Changes
                        </h4>
                        <pre className="text-sm font-mono whitespace-pre-wrap leading-relaxed bg-gray-50 dark:bg-gray-900 p-3 rounded border">
                          {result.slack_formatted.code_changes}
                        </pre>
                      </div>
                    </div>
                  </ScrollArea>
                </div>
              </div>
            </TabsContent>
          </Tabs>

          {/* Footer Stats */}
          <div className="mt-8 pt-6 border-t grid grid-cols-2 md:grid-cols-4 gap-4 text-center">
            <div className="bg-card rounded-lg border p-4">
              <div className="flex items-center justify-center gap-1 text-sm text-muted-foreground mb-1">
                <Clock className="h-3 w-3" />
                Processing Time
              </div>
              <div className="font-medium">
                {result.processing_metadata.processing_time}s
              </div>
            </div>
            <div className="bg-card rounded-lg border p-4">
              <div className="flex items-center justify-center gap-1 text-sm text-muted-foreground mb-1">
                <Zap className="h-3 w-3" />
                Tools Used
              </div>
              <div className="font-medium">
                {result.processing_metadata.tools_used.length}
              </div>
            </div>
            <div className="bg-card rounded-lg border p-4">
              <div className="flex items-center justify-center gap-1 text-sm text-muted-foreground mb-1">
                <Target className="h-3 w-3" />
                Confidence
              </div>
              <div
                className={`font-medium ${getConfidenceColor(result.analysis_summary.confidence_score)}`}
              >
                {(result.analysis_summary.confidence_score * 100).toFixed(1)}%
              </div>
            </div>
            <div className="bg-card rounded-lg border p-4">
              <div className="flex items-center justify-center gap-1 text-sm text-muted-foreground mb-1">
                <Lightbulb className="h-3 w-3" />
                Solutions
              </div>
              <div className="font-medium">
                {result.solution.immediate_fixes.length +
                  result.solution.code_changes.length +
                  result.solution.configuration_changes.length}
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}
