import React, { useState, useEffect, useCallback } from "react";
import {
  DialogContent,
  DialogHeader,
  DialogTitle,
  Dialog,
} from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import {
  CalendarDays,
  Users,
  ListTodo,
  Tag,
  Layers,
  Bookmark,
  ExternalLink,
  RefreshCw,
  AlertCircle,
  Zap,
} from "lucide-react";
import { type JiraIssue } from "@/services/jira-service";
import { generateSingleJiraIssueSummary } from "@/services/jira-ai-service";
import { Skeleton } from "@/components/ui/skeleton";
import { Card, CardContent } from "@/components/ui/card";
import { formatDistanceToNow } from "date-fns";
import { Spinner } from "@/components/ui/spinner";
import { Markdown } from "@/components/markdown";
import useLocalStorage from "@/hooks/use-local-storage";

// Cache structure for individual issue AI summaries
interface JiraIssueSummaryCache {
  [issueKey: string]: {
    summary: string;
    timestamp: number;
    expiresAt: number;
  };
}

// Cache TTL: 30 minutes (1800000 ms)
const CACHE_TTL = 30 * 60 * 1000;

interface JiraIssueDetailsModalProps {
  issue?: JiraIssue;
  isOpen: boolean;
  onClose: () => void;
  isLoading?: boolean;
}

export function JiraIssueDetailsModal({
  issue,
  isOpen,
  onClose,
  isLoading = false,
}: JiraIssueDetailsModalProps) {
  const [isGeneratingAiSummary, setIsGeneratingAiSummary] = useState(false);
  const [aiSummary, setAiSummary] = useState<string | undefined>(undefined);
  const [aiError, setAiError] = useState<string | null>(null);

  // Local storage cache for individual issue AI summaries
  const [summaryCache, setSummaryCache] =
    useLocalStorage<JiraIssueSummaryCache>("jira-issue-ai-summaries", {});

  const jiraBaseUrl =
    process.env.NEXT_PUBLIC_JIRA_BASE_URL || "https://jira.company.com";

  // Cache utility functions
  const getCachedSummary = useCallback(
    (issueKey: string): string | null => {
      const cached = summaryCache[issueKey];
      if (cached && Date.now() < cached.expiresAt) {
        return cached.summary;
      }
      return null;
    },
    [summaryCache]
  );

  const setCachedSummary = useCallback(
    (issueKey: string, summary: string) => {
      const now = Date.now();
      setSummaryCache((prev) => ({
        ...prev,
        [issueKey]: {
          summary,
          timestamp: now,
          expiresAt: now + CACHE_TTL,
        },
      }));
    },
    [setSummaryCache]
  );

  const openInJira = useCallback(() => {
    window.open(`${jiraBaseUrl}/browse/${issue?.key}`, "_blank");
  }, [issue?.key, jiraBaseUrl]);

  const generateAiSummary = useCallback(async () => {
    if (!issue) return;

    // Check cache first
    const cachedSummary = getCachedSummary(issue.key);
    if (cachedSummary) {
      setAiSummary(cachedSummary);
      setAiError(null);
      return;
    }

    setIsGeneratingAiSummary(true);
    setAiError(null);

    try {
      const summary = await generateSingleJiraIssueSummary(issue);

      // Check if the response indicates an error
      if (
        summary.startsWith("Error:") ||
        summary.includes("Failed to generate")
      ) {
        setAiError(summary);
        setAiSummary(undefined);
      } else {
        setAiSummary(summary);
        // Cache the successful summary
        setCachedSummary(issue.key, summary);
      }
    } catch (error) {
      console.error("Error generating JIRA issue AI summary:", error);
      setAiError(
        error instanceof Error
          ? error.message
          : "Failed to generate AI summary. Please try again."
      );
    } finally {
      setIsGeneratingAiSummary(false);
    }
  }, [issue, getCachedSummary, setCachedSummary]);

  // Generate AI summary for this specific issue if not provided
  useEffect(() => {
    if (issue && !aiSummary && !isGeneratingAiSummary) {
      generateAiSummary();
    }
  }, [issue, aiSummary, isGeneratingAiSummary, generateAiSummary]);

  // Reset AI summary when issue changes and check cache
  useEffect(() => {
    if (!issue) {
      setAiSummary(undefined);
      setAiError(null);
      return;
    }

    // Check if we have a cached summary for this issue
    const cachedSummary = getCachedSummary(issue.key);
    if (cachedSummary) {
      setAiSummary(cachedSummary);
      setAiError(null);
    } else {
      // Reset to undefined if no cache, AI summary will be generated by the other useEffect
      setAiSummary(undefined);
      setAiError(null);
    }
  }, [issue, getCachedSummary]);

  const formatDate = (dateString?: string) => {
    if (!dateString) return "N/A";

    try {
      const date = new Date(dateString);
      return `${date.toLocaleDateString()} (${formatDistanceToNow(date, { addSuffix: true })})`;
    } catch {
      return dateString;
    }
  };

  return (
    <Dialog open={isOpen} onOpenChange={(open) => !open && onClose()}>
      <DialogContent className="max-w-3xl max-h-[90vh] overflow-y-auto bg-white dark:bg-slate-900 border-gray-200 dark:border-slate-700">
        {isLoading || !issue ? (
          <div className="space-y-4">
            <Skeleton className="h-8 w-3/4" />
            <Skeleton className="h-4 w-full" />
            <Skeleton className="h-24 w-full" />
            <div className="flex gap-2">
              <Skeleton className="h-8 w-20" />
              <Skeleton className="h-8 w-20" />
            </div>
          </div>
        ) : (
          <>
            <DialogHeader className="border-b border-gray-200 dark:border-slate-700 pb-4">
              <div className="flex items-start justify-between">
                <div className="flex items-center gap-3 flex-1 min-w-0">
                  {issue.issuetype?.iconUrl && (
                    // We can't use Next.js Image here since JIRA icons are external URLs
                    // eslint-disable-next-line @next/next/no-img-element
                    <img
                      src={issue.issuetype.iconUrl}
                      alt={issue.issuetype.name}
                      className="w-6 h-6 flex-shrink-0"
                    />
                  )}
                  <div className="flex-1 min-w-0">
                    <DialogTitle className="text-xl font-semibold text-gray-900 dark:text-slate-200 mb-1">
                      {issue.key}
                    </DialogTitle>
                    <p className="text-base text-gray-700 dark:text-slate-300 leading-relaxed">
                      {issue.summary}
                    </p>
                  </div>
                </div>
                <Button
                  variant="outline"
                  size="sm"
                  onClick={openInJira}
                  className="ml-3 flex-shrink-0 hover:bg-blue-50 hover:border-blue-300 dark:hover:bg-slate-700 dark:hover:border-blue-600"
                >
                  <ExternalLink className="h-4 w-4 mr-2" />
                  Open in JIRA
                </Button>
              </div>

              <div className="flex flex-wrap gap-2 mt-4">
                <Badge
                  variant="outline"
                  className={`${
                    issue.status.statusCategory.key === "done"
                      ? "bg-green-100 text-green-800 border-green-300 dark:bg-green-900/20 dark:text-green-300 dark:border-green-700"
                      : issue.status.statusCategory.key === "new"
                        ? "bg-blue-100 text-blue-800 border-blue-300 dark:bg-blue-900/20 dark:text-blue-300 dark:border-blue-700"
                        : issue.status.statusCategory.key === "indeterminate"
                          ? "bg-yellow-100 text-yellow-800 border-yellow-300 dark:bg-yellow-900/20 dark:text-yellow-300 dark:border-yellow-700"
                          : "bg-gray-100 text-gray-800 border-gray-300 dark:bg-gray-800 dark:text-gray-300 dark:border-gray-700"
                  }`}
                >
                  {issue.status.name}
                </Badge>
                {issue.priority && (
                  <Badge
                    variant="outline"
                    className="bg-purple-100 text-purple-800 border-purple-300 dark:bg-purple-900/20 dark:text-purple-300 dark:border-purple-700"
                  >
                    Priority: {issue.priority.name}
                  </Badge>
                )}
                <Badge
                  variant="outline"
                  className="bg-gray-100 text-gray-800 border-gray-300 dark:bg-gray-800 dark:text-gray-300 dark:border-gray-700"
                >
                  {issue.issuetype.name}
                </Badge>
              </div>
            </DialogHeader>

            <Tabs defaultValue="details" className="mt-6">
              <TabsList className="grid w-full grid-cols-2 bg-gray-100 dark:bg-slate-800 border-gray-200 dark:border-slate-700">
                <TabsTrigger
                  value="details"
                  className="flex items-center space-x-2 data-[state=active]:bg-white data-[state=active]:text-blue-600 data-[state=active]:shadow-sm dark:data-[state=active]:bg-slate-700 dark:data-[state=active]:text-blue-400"
                >
                  <ListTodo className="h-4 w-4" />
                  <span>Details</span>
                </TabsTrigger>
                <TabsTrigger
                  value="ai-summary"
                  className="flex items-center space-x-2 data-[state=active]:bg-white data-[state=active]:text-purple-600 data-[state=active]:shadow-sm dark:data-[state=active]:bg-slate-700 dark:data-[state=active]:text-purple-400"
                >
                  <div className="flex items-center space-x-2">
                    <Zap className="h-4 w-4" />
                    <span>AI Summary</span>
                    {isGeneratingAiSummary && <Spinner className="h-3 w-3" />}
                  </div>
                </TabsTrigger>
              </TabsList>
              <TabsContent value="details" className="space-y-4 mt-4">
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <Card className="bg-white dark:bg-slate-800 border-gray-200 dark:border-slate-700 border-l-4 border-l-blue-500 hover:shadow-md transition-shadow">
                    <CardContent className="pt-4">
                      <div className="space-y-3">
                        <div className="flex items-center gap-2">
                          <Users className="h-5 w-5 text-blue-600 dark:text-blue-400" />
                          <h4 className="font-semibold text-gray-900 dark:text-slate-200">
                            People
                          </h4>
                        </div>
                        <div className="pl-7 space-y-2 text-sm">
                          <div className="flex items-center justify-between">
                            <span className="text-gray-600 dark:text-slate-400 font-medium">
                              Assignee:
                            </span>
                            <span className="text-gray-900 dark:text-slate-200 font-medium">
                              {issue.assignee?.displayName || "Unassigned"}
                            </span>
                          </div>
                          <div className="flex items-center justify-between">
                            <span className="text-gray-600 dark:text-slate-400 font-medium">
                              Reporter:
                            </span>
                            <span className="text-gray-900 dark:text-slate-200 font-medium">
                              {issue.reporter?.displayName || "Unknown"}
                            </span>
                          </div>
                        </div>
                      </div>
                    </CardContent>
                  </Card>

                  <Card className="bg-white dark:bg-slate-800 border-gray-200 dark:border-slate-700 border-l-4 border-l-green-500 hover:shadow-md transition-shadow">
                    <CardContent className="pt-4">
                      <div className="space-y-3">
                        <div className="flex items-center gap-2">
                          <CalendarDays className="h-5 w-5 text-green-600 dark:text-green-400" />
                          <h4 className="font-semibold text-gray-900 dark:text-slate-200">
                            Timeline
                          </h4>
                        </div>
                        <div className="pl-7 space-y-2 text-sm">
                          <div className="flex items-center justify-between">
                            <span className="text-gray-600 dark:text-slate-400 font-medium">
                              Created:
                            </span>
                            <span className="text-gray-900 dark:text-slate-200 font-medium">
                              {formatDate(issue.created)}
                            </span>
                          </div>
                          <div className="flex items-center justify-between">
                            <span className="text-gray-600 dark:text-slate-400 font-medium">
                              Updated:
                            </span>
                            <span className="text-gray-900 dark:text-slate-200 font-medium">
                              {formatDate(issue.updated)}
                            </span>
                          </div>
                          <div className="flex items-center justify-between">
                            <span className="text-gray-600 dark:text-slate-400 font-medium">
                              Resolved:
                            </span>
                            <span className="text-gray-900 dark:text-slate-200 font-medium">
                              {formatDate(issue.resolutiondate)}
                            </span>
                          </div>
                        </div>
                      </div>
                    </CardContent>
                  </Card>

                  <Card className="bg-white dark:bg-slate-800 border-gray-200 dark:border-slate-700 border-l-4 border-l-purple-500 hover:shadow-md transition-shadow">
                    <CardContent className="pt-4">
                      <div className="space-y-3">
                        <div className="flex items-center gap-2">
                          <Tag className="h-5 w-5 text-purple-600 dark:text-purple-400" />
                          <h4 className="font-semibold text-gray-900 dark:text-slate-200">
                            Labels
                          </h4>
                        </div>
                        <div className="pl-7">
                          {issue.labels && issue.labels.length > 0 ? (
                            <div className="flex flex-wrap gap-1">
                              {issue.labels.map((label) => (
                                <Badge
                                  key={label}
                                  variant="secondary"
                                  className="text-xs bg-purple-100 text-purple-800 border-purple-200 dark:bg-purple-900/20 dark:text-purple-300 dark:border-purple-700"
                                >
                                  {label}
                                </Badge>
                              ))}
                            </div>
                          ) : (
                            <span className="text-sm text-gray-500 dark:text-slate-400 italic">
                              No labels assigned
                            </span>
                          )}
                        </div>
                      </div>
                    </CardContent>
                  </Card>

                  <Card className="bg-white dark:bg-slate-800 border-gray-200 dark:border-slate-700 border-l-4 border-l-orange-500 hover:shadow-md transition-shadow">
                    <CardContent className="pt-4">
                      <div className="space-y-3">
                        <div className="flex items-center gap-2">
                          <Layers className="h-5 w-5 text-orange-600 dark:text-orange-400" />
                          <h4 className="font-semibold text-gray-900 dark:text-slate-200">
                            Project
                          </h4>
                        </div>
                        <div className="pl-7 space-y-2 text-sm">
                          <div className="flex items-center justify-between">
                            <span className="text-gray-600 dark:text-slate-400 font-medium">
                              Name:
                            </span>
                            <span className="text-gray-900 dark:text-slate-200 font-medium">
                              {issue.project.name}
                            </span>
                          </div>
                          <div className="flex items-center justify-between">
                            <span className="text-gray-600 dark:text-slate-400 font-medium">
                              Key:
                            </span>
                            <span className="text-gray-900 dark:text-slate-200 font-medium">
                              {issue.project.key}
                            </span>
                          </div>
                        </div>
                      </div>
                    </CardContent>
                  </Card>

                  {issue.components && issue.components.length > 0 && (
                    <Card className="bg-white dark:bg-slate-800 border-gray-200 dark:border-slate-700 border-l-4 border-l-indigo-500 hover:shadow-md transition-shadow">
                      <CardContent className="pt-4">
                        <div className="space-y-3">
                          <div className="flex items-center gap-2">
                            <ListTodo className="h-5 w-5 text-indigo-600 dark:text-indigo-400" />
                            <h4 className="font-semibold text-gray-900 dark:text-slate-200">
                              Components
                            </h4>
                          </div>
                          <div className="pl-7">
                            <div className="flex flex-wrap gap-1">
                              {issue.components.map((comp) => (
                                <Badge
                                  key={comp.name}
                                  variant="outline"
                                  className="text-xs bg-indigo-50 text-indigo-800 border-indigo-200 dark:bg-indigo-900/20 dark:text-indigo-300 dark:border-indigo-700"
                                >
                                  {comp.name}
                                </Badge>
                              ))}
                            </div>
                          </div>
                        </div>
                      </CardContent>
                    </Card>
                  )}

                  {issue.fixVersions && issue.fixVersions.length > 0 && (
                    <Card className="bg-white dark:bg-slate-800 border-gray-200 dark:border-slate-700 border-l-4 border-l-emerald-500 hover:shadow-md transition-shadow">
                      <CardContent className="pt-4">
                        <div className="space-y-3">
                          <div className="flex items-center gap-2">
                            <Bookmark className="h-5 w-5 text-emerald-600 dark:text-emerald-400" />
                            <h4 className="font-semibold text-gray-900 dark:text-slate-200">
                              Fix Versions
                            </h4>
                          </div>
                          <div className="pl-7">
                            <div className="flex flex-wrap gap-1">
                              {issue.fixVersions.map((version) => (
                                <Badge
                                  key={version.name}
                                  variant="outline"
                                  className="text-xs bg-emerald-50 text-emerald-800 border-emerald-200 dark:bg-emerald-900/20 dark:text-emerald-300 dark:border-emerald-700"
                                >
                                  {version.name}
                                </Badge>
                              ))}
                            </div>
                          </div>
                        </div>
                      </CardContent>
                    </Card>
                  )}
                </div>

                {issue.description && (
                  <Card className="mt-6 bg-white dark:bg-slate-800 border-gray-200 dark:border-slate-700 border-l-4 border-l-gray-500">
                    <CardContent className="pt-4">
                      <div className="space-y-3">
                        <div className="flex items-center gap-2">
                          <svg
                            className="h-5 w-5 text-gray-600 dark:text-gray-400"
                            fill="none"
                            stroke="currentColor"
                            viewBox="0 0 24 24"
                          >
                            <path
                              strokeLinecap="round"
                              strokeLinejoin="round"
                              strokeWidth={2}
                              d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"
                            />
                          </svg>
                          <h4 className="font-semibold text-gray-900 dark:text-slate-200">
                            Description
                          </h4>
                        </div>
                        <div className="pl-7">
                          <div className="bg-gray-50 p-4 rounded-lg border text-sm whitespace-pre-wrap leading-relaxed dark:bg-slate-900 dark:border-slate-600 dark:text-slate-300">
                            {issue.description}
                          </div>
                        </div>
                      </div>
                    </CardContent>
                  </Card>
                )}
              </TabsContent>

              <TabsContent value="ai-summary" className="space-y-4 mt-6">
                {isGeneratingAiSummary ? (
                  <div className="bg-gradient-to-br from-blue-50 via-purple-50 to-pink-50 p-6 rounded-xl border border-blue-200 dark:from-blue-900/20 dark:via-purple-900/20 dark:to-pink-900/20 dark:border-blue-700">
                    <div className="flex flex-col items-center justify-center space-y-4">
                      <div className="flex items-center gap-3">
                        <Spinner className="text-blue-500 dark:text-blue-400" />
                        <div className="flex items-center gap-2">
                          <Zap className="h-5 w-5 text-purple-600 dark:text-purple-400 animate-pulse" />
                          <p className="text-gray-700 dark:text-slate-300 font-medium">
                            Generating AI analysis...
                          </p>
                        </div>
                      </div>
                      <div className="w-full space-y-3">
                        <Skeleton className="h-4 w-full" />
                        <Skeleton className="h-4 w-3/4" />
                        <Skeleton className="h-4 w-5/6" />
                      </div>
                    </div>
                  </div>
                ) : aiError ? (
                  <div className="bg-gradient-to-br from-red-50 to-pink-50 p-6 rounded-xl border border-red-200 dark:from-red-900/20 dark:to-pink-900/20 dark:border-red-700">
                    <div className="flex items-center gap-3 mb-4">
                      <AlertCircle className="h-6 w-6 text-red-500 dark:text-red-400 flex-shrink-0" />
                      <h4 className="font-semibold text-red-700 dark:text-red-300">
                        Error generating AI summary
                      </h4>
                    </div>
                    <p className="text-sm text-red-600 dark:text-red-400 mb-4 leading-relaxed">
                      {aiError}
                    </p>
                    <Button
                      size="sm"
                      onClick={generateAiSummary}
                      className="bg-red-100 text-red-700 hover:bg-red-200 border-red-300 dark:bg-red-900/20 dark:text-red-300 dark:hover:bg-red-900/40 dark:border-red-700"
                    >
                      <RefreshCw className="h-4 w-4 mr-2" />
                      Try Again
                    </Button>
                  </div>
                ) : aiSummary ? (
                  <div className="bg-gradient-to-br from-blue-50 via-purple-50 to-indigo-50 p-6 rounded-xl border border-blue-200 dark:from-blue-900/20 dark:via-purple-900/20 dark:to-indigo-900/20 dark:border-blue-700">
                    <div className="flex items-center justify-between mb-4">
                      <div className="flex items-center gap-3">
                        <div className="p-2 bg-white rounded-lg shadow-sm dark:bg-slate-800">
                          <Zap className="h-5 w-5 text-blue-600 dark:text-blue-400" />
                        </div>
                        <h4 className="font-semibold text-blue-700 dark:text-blue-300 text-lg">
                          AI Analysis Summary
                        </h4>
                      </div>
                      <Button
                        size="sm"
                        variant="ghost"
                        onClick={generateAiSummary}
                        className="h-8 px-3 hover:bg-white/50 dark:hover:bg-slate-800/50"
                      >
                        <RefreshCw className="h-4 w-4 mr-2" />
                        Refresh
                      </Button>
                    </div>
                    <div className="bg-white/70 p-4 rounded-lg border border-white/50 dark:bg-slate-800/70 dark:border-slate-700/50">
                      <Markdown>{aiSummary}</Markdown>
                    </div>
                  </div>
                ) : (
                  <div className="text-center py-12 bg-gray-50 dark:bg-slate-800 rounded-xl border-2 border-dashed border-gray-300 dark:border-slate-600">
                    <div className="flex flex-col items-center space-y-4">
                      <div className="p-3 bg-white rounded-full shadow-sm dark:bg-slate-700">
                        <Zap className="h-8 w-8 text-gray-400 dark:text-slate-500" />
                      </div>
                      <div className="space-y-2">
                        <p className="text-gray-500 dark:text-slate-400 font-medium">
                          No AI summary available
                        </p>
                        <p className="text-sm text-gray-400 dark:text-slate-500">
                          Generate an AI-powered analysis of this issue
                        </p>
                      </div>
                      <Button
                        onClick={generateAiSummary}
                        className="bg-blue-600 hover:bg-blue-700 text-white"
                      >
                        <Zap className="h-4 w-4 mr-2" />
                        Generate AI Summary
                      </Button>
                    </div>
                  </div>
                )}
              </TabsContent>
            </Tabs>
          </>
        )}
      </DialogContent>
    </Dialog>
  );
}
