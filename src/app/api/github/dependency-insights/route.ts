export const dynamic = "force-dynamic";

import { auth } from "@/auth";
import { WatsonxLLM } from "@langchain/community/llms/ibm";
import { PromptTemplate } from "@langchain/core/prompts";

export async function POST(req: Request) {
  try {
    const session = await auth();

    if (!session?.user?.id) {
      return Response.json(
        {
          status: "error",
          message: "Unauthorized access",
        },
        { status: 401 }
      );
    }

    const { analysisData, type } = await req.json();

    if (!analysisData || type !== "dependency_analysis") {
      return Response.json(
        {
          status: "error",
          message: "Invalid analysis data provided",
        },
        { status: 400 }
      );
    }

    // Create comprehensive prompt for dependency analysis
    const promptTemplate = `You are a senior Salesforce architect and developer analyzing code dependencies. Provide intelligent insights and recommendations based on the dependency analysis data.

Analysis Data:
- Total Files: ${analysisData.statistics.totalFiles}
- Total Dependencies: ${analysisData.statistics.totalDependencies}
- Cross-Repository Links: ${analysisData.statistics.crossRepositoryLinks}
- Shared Components: ${analysisData.statistics.sharedComponents}
- Complexity Score: ${analysisData.statistics.complexityScore}/100

Dependency Patterns Found:
- Method Calls: ${analysisData.patterns.methodCalls}
- SOQL Queries: ${analysisData.patterns.soqlQueries}
- Database Operations: ${analysisData.patterns.databaseOperations}
- Schema References: ${analysisData.patterns.schemaReferences}
- Trigger Contexts: ${analysisData.patterns.triggerContexts}
- Test Coverage: ${analysisData.patterns.testCoverage}

Risk Factors Identified:
${analysisData.riskFactors.map((risk: string) => `- ${risk}`).join("\n")}

Repository Relationships:
${analysisData.repositoryRelationships.map((rel: { repository: string; dependencies: string[] }) => `- ${rel.repository}: ${rel.dependencies.length} dependencies`).join("\n")}

Please provide a comprehensive analysis in the following format:

**üéØ Key Insights:**
- Provide 3-4 most important insights about the codebase architecture
- Focus on Salesforce-specific patterns and implications
- Highlight any architectural strengths or concerns

**‚ö†Ô∏è Architecture Assessment:**
- Evaluate the overall architecture quality based on the complexity score and patterns
- Identify potential technical debt or architectural issues
- Comment on code organization and dependency management

**üîß Strategic Recommendations:**
- Provide 3-5 actionable recommendations for improvement
- Focus on Salesforce best practices (governor limits, security, performance)
- Suggest specific refactoring opportunities if applicable

**üìä Development Priorities:**
- Recommend what should be addressed first based on risk factors
- Suggest areas for immediate attention vs. long-term improvements
- Consider team productivity and maintainability factors

Keep your analysis concise but comprehensive, focusing on actionable insights that help Salesforce developers make informed architectural decisions.`;

    // Format the prompt
    const prompt = PromptTemplate.fromTemplate(promptTemplate);
    const formattedPrompt = await prompt.format({});

    try {
      // Initialize WatsonX LLM
      const model = new WatsonxLLM({
        model: "ibm/granite-3-2-8b-instruct",
        watsonxAIAuthType: "iam",
        watsonxAIApikey: process.env.WATSONX_API_KEY || "", // pragma: allowlist secret
        serviceUrl: "https://us-south.ml.cloud.ibm.com",
        projectId: process.env.WATSONX_PROJECT_ID || "",
        version: "2023-05-29",
        maxNewTokens: 1500,
        minNewTokens: 300,
        temperature: 0.3, // Lower temperature for more focused analysis
        topP: 0.9,
      });

      // Generate AI insights
      const insights = await model.invoke(formattedPrompt);
      console.log(`Generated dependency insights:`, insights);

      if (!insights || insights.trim() === "") {
        console.error("Empty insights generated by the model");
        return Response.json(
          {
            status: "error",
            message: "Generated insights were empty",
          },
          { status: 500 }
        );
      }

      return Response.json({
        status: "success",
        insights: insights.trim(),
      });
    } catch (aiError) {
      console.error("WatsonX API request failed:", aiError);
      return Response.json(
        {
          status: "error",
          message: "AI service request failed",
          details: aiError instanceof Error ? aiError.message : "Unknown error",
        },
        { status: 500 }
      );
    }
  } catch (error) {
    console.error("Dependency insights generation error:", error);
    return Response.json(
      {
        status: "error",
        message: error instanceof Error ? error.message : "Unknown error",
      },
      { status: 500 }
    );
  }
}
